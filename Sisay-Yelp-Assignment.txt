Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =    10,0000 => select count(*) from attribute
ii. Business table = 	10,000 => select count(*) from business
iii. Category table = 	10,000 => select count(*) from category
iv. Checkin table = 	10,000 => select count(*) from checkin
v. elite_years table = 	10,000 => select count(*) from elite_years
vi. friend table =  	10,000 => select count(*) from friend
vii. hours table = 		10,000 => select count(*) from hours
viii. photo table =  	10,000 => select count(*) from photo
ix. review table =  	10,000 => select count(*) from review
x. tip table =  		10,000 => select count(*) from tip
xi. user table = 		10,000 => select count(*) from user
	

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business =		10,000 => select count(distinct id) from business
ii. Hours =			1,562 => select count(distinct business_id) from hours
iii. Category =		2,643 => select count(distinct business_id) from category
iv. Attribute =		1,115 => select count(distinct business_id) from attribute
v. Review =			10,000 => select count(distinct id) from review
vi. Checkin = 		493 => select count(distinct business_id) from checkin
vii. Photo =		10,000 => select count(distinct id) from photo
viii. Tip = 		537 => select count(distinct user_id) from tip or 3979 using business_id 
ix. User = 			10,000 => select count(distinct id) from user
x. Friend = 		11 => select count(distinct user_id) from friend
xi. Elite_years = 	2,780 => select count(distinct user_id) from elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO 
	
	SQL code used to arrive at answer:
	SELECT COUNT(*)
		FROM user
		WHERE id IS NULL OR 
			name IS NULL OR 
			review_count IS NULL OR 
			yelping_since IS NULL OR
			useful IS NULL OR 
			funny IS NULL OR 
			cool IS NULL OR 
			fans IS NULL OR 
			average_stars IS NULL OR 
			compliment_hot IS NULL OR 
			compliment_more IS NULL OR 
			compliment_profile IS NULL OR 
			compliment_cute IS NULL OR 
			compliment_list IS NULL OR 
			compliment_note IS NULL OR 
			compliment_plain IS NULL OR 
			compliment_cool IS NULL OR 
			compliment_funny IS NULL OR 
			compliment_writer IS NULL OR 
			compliment_photos IS NULL
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:


	i. Table: Review, Column: Stars
	
		min:	1	max: 5	avg: 3.7082	
		Query example: 
		select min(stars) as min,  max(stars) as max , avg(stars) as avg 
				from review
	
	ii. Table: Business, Column: Stars
	
		min:	1	max: 5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
	select 
		city, sum(review_count) as num_reviews 
		from business 
		group by city 
		order by 2 desc ;
	
	
	Copy and Paste the Result Below:
	+-----------------+-------------+
| city            | num_reviews |
+-----------------+-------------+
| Las Vegas       |       82854 |
| Phoenix         |       34503 |
| Toronto         |       24113 |
| Scottsdale      |       20614 |
| Charlotte       |       12523 |
| Henderson       |       10871 |
| Tempe           |       10504 |
| Pittsburgh      |        9798 |
| Montréal        |        9448 |
| Chandler        |        8112 |
| Mesa            |        6875 |
| Gilbert         |        6380 |
| Cleveland       |        5593 |
| Madison         |        5265 |
| Glendale        |        4406 |
| Mississauga     |        3814 |
| Edinburgh       |        2792 |
| Peoria          |        2624 |
| North Las Vegas |        2438 |
| Markham         |        2352 |
| Champaign       |        2029 |
| Stuttgart       |        1849 |
| Surprise        |        1520 |
| Lakewood        |        1465 |
| Goodyear        |        1155 |
+-----------------+-------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
select stars, sum(review_count) as num_stars
from business 
where city = 'Avon'
group by stars 

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+-----------+
| stars | num_stars |
+-------+-----------+
|   1.5 |        10 |
|   2.5 |         6 |
|   3.5 |        88 |
|   4.0 |        21 |
|   4.5 |        31 |
|   5.0 |         3 |
+-------+-----------+

ii. Beachwood

SQL code used to arrive at answer:
select stars, sum(review_count) as num_stars
from business 
where city = 'Beachwood'
group by stars 

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	+-------+-----------+
| stars | num_stars |
+-------+-----------+
|   2.0 |         8 |
|   2.5 |         3 |
|   3.0 |        11 |
|   3.5 |         6 |
|   4.0 |        69 |
|   4.5 |        17 |
|   5.0 |        23 |
+-------+-----------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	select id, name, sum(review_count) as num_reviews
		from user 
		group by id 
		order by num_reviews DESC 
		LIMIT 3 
		
	Copy and Paste the Result Below:
		
		+------------------------+--------+-------------+
		| id                     | name   | num_reviews |
		+------------------------+--------+-------------+
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |        2000 |
		| -3s52C4zL_DHRK0ULG6qtg | Sara   |        1629 |
		| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |        1339 |
		+------------------------+--------+-------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Not necessary. More reviews might be a result of controversial posts and might not necessarily imply fans. For example 
a top actress might have a lot of followers or fans but less reviews if he doesn't post. This can be shown wit the 
below result where top reviews do not have the top fans. The top 3 by fans are not the top interms of fans - only Gerald is the 4th.
select id, name, sum(review_count) as num_reviews, sum(fans) as fans
from user 
group by id 
order by fans DESC 
LIMIT 10

+------------------------+-----------+-------------+------+
| id                     | name      | num_reviews | fans |
+------------------------+-----------+-------------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |         609 |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |         968 |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |        1153 |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |        2000 |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |         930 |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |         813 |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |         377 |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |        1215 |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |         862 |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |         834 |  120 |
+------------------------+-----------+-------------+------+


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More words with love exist 
+----------+--------+
| key_word | counts |
+----------+--------+
| Hate     |    232 |
| Love     |   1780 |
+----------+--------+
	
	SQL code used to arrive at answer:
	select "Love" as key_word, count(*)  as counts
		from review where text like '%love%'
		union 
		select "Hate" as key_word, count(*)  as counts
		from review where text like '%hate%'

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	select id, name, fans 
	from user 
	group by id 
	order by 3 desc
	limit 10
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
For Torronto it seems higher rated business tend to work for few hours. But since toronto has only one higher rated 
restaurant it is difficult to generalize this inference 


+------------------------+---------+-------------+-------------+-----------------------+
| b.id                   | b.city  | c.category  | star_rating | h.hours               |
+------------------------+---------+-------------+-------------+-----------------------+
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Friday|10:30-21:00    |
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Monday|10:30-21:00    |
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Saturday|10:30-21:00  |
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Sunday|11:00-19:00    |
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Thursday|10:30-21:00  |
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Tuesday|10:30-21:00   |
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         | Wednesday|10:30-21:00 |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Friday|9:00-4:00      |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Monday|9:00-23:00     |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Saturday|10:00-4:00   |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Sunday|10:00-23:00    |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Thursday|9:00-23:00   |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Tuesday|9:00-23:00    |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         | Wednesday|9:00-23:00  |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Friday|11:00-23:00    |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Monday|11:00-23:00    |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Saturday|11:00-23:00  |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Sunday|11:00-23:00    |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Thursday|11:00-23:00  |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Tuesday|11:00-23:00   |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         | Wednesday|11:00-23:00 |
| 37kk0IW6jL7ZlxZF6k2QBg | Toronto | Restaurants | 4-5         | Friday|18:00-23:00    |
| 37kk0IW6jL7ZlxZF6k2QBg | Toronto | Restaurants | 4-5         | Saturday|18:00-23:00  |
| 37kk0IW6jL7ZlxZF6k2QBg | Toronto | Restaurants | 4-5         | Sunday|12:00-16:00    |
| 37kk0IW6jL7ZlxZF6k2QBg | Toronto | Restaurants | 4-5         | Thursday|18:00-23:00  |

SQL CODE: 
select b.id, b.city , c.category, "2-3" as star_rating, h.hours
from business b
inner join category c 
on b.id = c.business_id
inner join hours h 
on b.id = h.business_id
where c.category = "Restaurants" and b.city = "Toronto" and b.stars in (2,3)
group by b.city, c.category, star_rating, h.hours 

union 

select b.id, b.city , c.category, "4-5" as star_rating, h.hours
from business b
inner join category c 
on b.id = c.business_id
inner join hours h 
on b.id = h.business_id
where c.category = "Restaurants" and b.city = "Toronto" and b.stars in (4,5)
group by b.city, c.category, star_rating, h.hours 
order by b.id asc

ii. Do the two groups you chose to analyze have a different number of reviews?
Continuing with Toronto and Restaurants, case the number of reviews differs as shown below . Higher rated 
restaurant happens to have the largest reviews.

+------------------------+---------+-------------+-------------+---------------------+
| b.id                   | b.city  | c.category  | star_rating | sum(b.review_count) |
+------------------------+---------+-------------+-------------+---------------------+
| 0B3W6KxkD3o4W4l6cq735w | Toronto | Restaurants | 2-3         |                 329 |
| 1NyHpXJqSLHnvDCOW0nJDg | Toronto | Restaurants | 2-3         |                 238 |
| 1nTMWMa6v-eBKkPYA3gxkQ | Toronto | Restaurants | 2-3         |                  35 |
| 37kk0IW6jL7ZlxZF6k2QBg | Toronto | Restaurants | 4-5         |                 445 |

SQL: 
select b.id, b.city , c.category, "2-3" as star_rating, sum(b.review_count)
from business b
inner join category c 
on b.id = c.business_id
inner join hours h 
on b.id = h.business_id
where c.category = "Restaurants" and b.city = "Toronto" and b.stars in (2,3)
group by b.id, c.category, star_rating

union 

select b.id, b.city , c.category, "4-5" as star_rating, sum(b.review_count)
from business b
inner join category c 
on b.id = c.business_id
inner join hours h 
on b.id = h.business_id
where c.category = "Restaurants" and b.city = "Toronto" and b.stars in (4,5)
group by b.id, c.category, star_rating 
order by b.id asc
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Since the data for Toronto is small in total as shown below difficult to infer the location impact. But generally I presume location 
and rating to have some link .
+----------+---------+-------------+-------------+--------------+---------------+
| location | b.city  | c.category  | star_rating | percent_open | total_reviews |
+----------+---------+-------------+-------------+--------------+---------------+
|  43.6419 | Toronto | Restaurants | 4-5         |          1.0 |            89 |
|  43.6479 | Toronto | Restaurants | 2-3         |          1.0 |            34 |
|  43.6546 | Toronto | Restaurants | 2-3         |          1.0 |            47 |
|  43.6614 | Toronto | Restaurants | 2-3         |          0.0 |             5 |
|  43.6809 | Toronto | Restaurants | 4-5         |          0.0 |             8 |
|  43.7766 | Toronto | Restaurants | 4-5         |          1.0 |            75 |
+----------+---------+-------------+-------------+--------------+---------------+

SQL code used for analysis:

	select b.latitude location, b.city , c.category, "2-3" as star_rating, avg(b.is_open) percent_open, sum(review_count) total_reviews
from business b
left join category c 
on b.id = c.business_id
where c.category = "Restaurants" and b.city = "Toronto" and b.stars in (2,3)
group by location

union 
select b.latitude  location, b.city , c.category, "4-5" as star_rating, avg(b.is_open) percent_open, sum(review_count) total_reviews
from business b
left join category c 
on b.id = c.business_id
where c.category = "Restaurants" and b.city = "Toronto" and b.stars in (4,5)
group by location 	
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

+---------+---------------+---------------------+---------------------+
| is_open |  AVG(b.stars) | avg(b.review_count) | sum(b.review_count) |
+---------+---------------+---------------------+---------------------+
|       0 | 3.52039473684 |       23.1980263158 |               35261 |
|       1 | 3.67900943396 |       31.7570754717 |              269300 |
+---------+---------------+---------------------+---------------------+

i. Difference 1:
        Opened businesses tend to have larger reviews - expected result 
         
ii. Difference 2:
         Average rating is relatively higher for open businesses
         
         
SQL code used for analysis:
		select b.is_open, AVG(b.stars), avg(b.review_count) , sum(b.review_count)
from business b
group by b.is_open
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         Predict the probability of a business with a specific category being open on a given daay.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
        Try to use descriptive statistics for a business category and % of opening for the category to see whether 
		a given category (e.g. restaurant) is open on a given data.               
                  
iii. Output of your finished dataset:

+-------------------------+--------------------+---------------------+-----------------------+----------------------+--------------------+----------------------+--------------------+
| Category                | Monday probability | Tuesday probability | Wednesday probability | Thursday probability | Friday probability | Saturday probability | Sunday probability |
+-------------------------+--------------------+---------------------+-----------------------+----------------------+--------------------+----------------------+--------------------+
| Active Life             |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Acupuncture             |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| American (New)          |                0.5 |                 0.5 |                   0.5 |                  0.5 |                0.5 |                  0.5 |     0.666666666667 |
| American (Traditional)  |               0.75 |                0.75 |                  0.75 |                 0.75 |               0.75 |                 0.75 |     0.833333333333 |
| Apartments              |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Arabian                 |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Arcades                 |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Architects              |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Architectural Tours     |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Art Galleries           |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Arts & Crafts           |               None |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |               None |
| Arts & Entertainment    |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Asian Fusion            |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Auto Detailing          |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Auto Repair             |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |               None |
| Automotive              |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Bagels                  |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |               None |
| Bakeries                |               0.75 |                0.75 |                   0.8 |                  0.8 |                0.8 |                  0.8 |                1.0 |
| Barbeque                |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Bars                    |     0.583333333333 |      0.642857142857 |        0.642857142857 |       0.642857142857 |     0.642857142857 |       0.642857142857 |               0.75 |
| Beauty & Spas           |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Beer                    |               None |                 0.5 |                   0.5 |                  0.5 |                0.5 |                  0.5 |                0.5 |
| Beer Garden             |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Bike Repair/Maintenance |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
| Bikes                   |                1.0 |                 1.0 |                   1.0 |                  1.0 |                1.0 |                  1.0 |                1.0 |
+-------------------------+--------------------+---------------------+-----------------------+----------------------+--------------------+----------------------+--------------------+
(Output limit exceeded, 25 of 195 total rows shown)

iv. Provide the SQL code you used to create your final dataset:

select category,
       sum(case when day_open = "Monday" then Probability_Open end) as "Monday probability",
       sum(case when day_open = "Tuesday" then Probability_Open end) as "Tuesday probability",
        sum(case when day_open = "Wednesday" then Probability_Open end) as "Wednesday probability",
        sum(case when day_open = "Thursday" then Probability_Open end) as "Thursday probability",
        sum(case when day_open = "Friday" then Probability_Open end) as "Friday probability",
        sum(case when day_open = "Saturday" then Probability_Open end) as "Saturday probability",
        sum(case when day_open = "Sunday" then Probability_Open end) as "Sunday probability"
from ( 
    select c.category Category , avg(b.is_open) Probability_Open , case 
        when h.hours like '%monday%' then "Monday" 
        when h.hours like '%tues%' then "Tuesday"
        when h.hours like '%wed%' then "Wednesday"
        when h.hours like '%thur%' then "Thursday"
        when h.hours like '%fri%' then "Friday"
        when h.hours like '%sat%' then "Saturday"
        when h.hours like '%sun%' then "Sunday"
    end day_open 
    from business b left join category c 
    on b.id = c.business_id 
    inner join hours h 
    on b.id = h.business_id 
    where c.category != "None" 
    group by category, day_open
    having Probability_Open>0
    order by day_open, Probability_Open asc
) 
group by category 



